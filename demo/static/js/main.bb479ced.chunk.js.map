{"version":3,"sources":["Tags/Tags.tsx","Accordion/Accordion.tsx","ShortWritingManager/ShortWritingManager.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tags","props","allTags","usedTags","unusedTags","className","length","map","tag","index","key","Accordion","useState","isOpen","setIsOpen","classNameString","onClick","title","children","ShortWritingManager","jsonVersion","jsonTitle","allShortTexts","categories","tags","allCurrentid","this","shortText","Number","id","Math","max","jsonData","JSON","parse","version","texts","categoryName","trim","includes","push","tagName","getNextTextId","category","forEach","addTag","addCategory","allTextsInPlainText","text","fullObject","stringify","mapOfTexts","Map","has","idArrayForThisText","get","set","mapShortTexts","idsOfTexts","delete","mapOfCurrentTexts","hasDuplicate","console","log","join","size","usedTagsSet","Set","add","Array","from","allUsedTags","getAllUsedTags","filter","App","setTags","setUsedTags","setUnusedTags","showDulicateTexts","setShowDulicateTexts","swm","useRef","Date","now","lastChangeTime","setLastChangeTime","copyJsonToClipboard","shortTextJsonInput","document","getElementById","disabled","focus","select","execCommand","bumpVersion","current","addNewText","newTextInput","newText","value","newTextCategoryInput","newTextTagsInput","newCategory","newTextTags","newTextTagsTrimmedValue","split","newShortText","addText","addMultipleNewTexts","newTextString","importDataFromTextarea","textareaInput","newJson","readDataFromJSON","error","toggleShowingDuplicateTexts","useEffect","testJson","getAllTags","getUnusedTags","type","placeholder","rows","cols","textToShow","getDuplicateTexts","renderDuplicateTexts","getJsonFromCurrentData","getShortTextListAsPlainText","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bb479ced.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Tags.css';\r\n\r\ninterface TagsInterface {\r\n  allTags: string[];\r\n  usedTags: string[];\r\n  unusedTags: string[];\r\n}\r\n\r\nconst Tags: React.FunctionComponent<TagsInterface> = (props) => {\r\n  const { allTags, usedTags, unusedTags } = props;\r\n\r\n  return (\r\n    <div className=\"tags\">\r\n        <div className=\"flex\">\r\n          <div className=\"all-tags\">\r\n            <h4>All tags</h4>\r\n            <ul className=\"tag-list\">\r\n              {!!allTags?.length && allTags.map((tag, index) => <li className=\"tag\" key={index}>{tag}</li>)}\r\n            </ul>\r\n          </div>\r\n          <div className=\"used-tags\">\r\n            <h4>Used tags</h4>\r\n            <ul className=\"tag-list\">\r\n              {!!usedTags?.length && usedTags.map((tag, index) => <li className=\"tag\" key={index}>{tag}</li>)}\r\n            </ul>\r\n          </div>\r\n          <div className=\"unused-tags\">\r\n            <h4>Not used tags</h4>\r\n            <ul className=\"tag-list\">\r\n              {!!unusedTags?.length && unusedTags.map((tag, index) => <li className=\"tag\" key={index}>{tag}</li>)}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tags;\r\n","import React, { FunctionComponent, useState } from \"react\";\r\n\r\nimport './Accordion.css';\r\n\r\ninterface AccordionInterface {\r\n  title: string;\r\n};\r\n\r\nconst Accordion: FunctionComponent<AccordionInterface> = (props): JSX.Element => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const classNameString = `accordion ${isOpen ? 'open' : ''}`\r\n\r\n  return (\r\n    <div className={classNameString}>\r\n      <h3 onClick={() => setIsOpen(!isOpen)}>{isOpen ? 'üùß' : 'üùî'} {props.title}</h3>\r\n      {\r\n        isOpen &&\r\n        <div className=\"accordion-content\">\r\n          {props.children}\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Accordion;\r\n","import { ShortText, ShortTextJSON } from './interfaces';\n\nclass ShortWritingManager {\n  private jsonVersion: number; // TODO: upgrade version from number to version text (like 0.2.13)\n  private jsonTitle: string = '';\n  private allShortTexts: ShortText[] = [];\n  private categories: string[] = [];\n  private tags: string[] = [];\n\n  private getNextTextId() {\n    const allCurrentid = this.allShortTexts.map(shortText => Number(shortText.id));\n    const currentMaxId = Math.max(...allCurrentid);\n    return currentMaxId + 1;\n  }\n\n  public readDataFromJSON(jsonData: ShortTextJSON | string) {\n    if (typeof jsonData === 'string') {\n      jsonData = JSON.parse(jsonData) as ShortTextJSON;\n    }\n    this.jsonVersion = Number(jsonData.version);\n    this.jsonTitle = jsonData.title;\n    this.categories = jsonData.categories;\n    this.tags = jsonData.tags;\n    this.allShortTexts = jsonData.texts;\n  }\n\n  public addCategory(categoryName: string) {\n    categoryName = categoryName.trim();\n    if (categoryName && !this.categories.includes(categoryName)) {\n      this.categories.push(categoryName);\n    }\n  }\n\n  public addTag(tagName: string) {\n    tagName = tagName.trim();\n    if (tagName && !this.tags.includes(tagName)) {\n      this.tags.push(tagName);\n    }\n  }\n\n  public addText(shortText: ShortText) {\n    shortText.id = this.getNextTextId();\n    if (!shortText.category) {\n      shortText.category = \"uncategorized\";\n    }\n    this.allShortTexts.push(shortText);\n    shortText.tags.forEach(tag => this.addTag(tag));\n    this.addCategory(shortText.category);\n  }\n\n  public getShortTextListAsPlainText(): string {\n    const delimiter = \"\\n- - -\\n\";\n    let allTextsInPlainText = `All texts (SUM: ${this.allShortTexts.length}):`;\n    allTextsInPlainText += delimiter;\n    this.allShortTexts.forEach((shortText, index) => {\n      allTextsInPlainText += shortText.text + delimiter;\n    });\n    return allTextsInPlainText;\n  }\n\n  public getJsonFromCurrentData() {\n    const fullObject: ShortTextJSON = {\n      version: `${this.jsonVersion}`,\n      title: this.jsonTitle,\n      categories: this.categories,\n      tags: this.tags,\n      texts: this.allShortTexts,\n    };\n    return JSON.stringify(fullObject, null, 2);\n  }\n\n  public bumpVersion() {\n    this.jsonVersion += 1;\n  }\n\n  private mapShortTexts(): Map<string, number[]> {\n    const mapOfTexts = new Map<string, number[]>();\n    this.allShortTexts.forEach((shortText) => {\n      const text = shortText.text.trim();\n      const id = Number(shortText.id);\n      if (mapOfTexts.has(text)) {\n        const idArrayForThisText = mapOfTexts.get(text);\n        idArrayForThisText?.push(id);\n      } else {\n        mapOfTexts.set(text, [id]);\n      }\n    });\n    return mapOfTexts;\n  }\n\n  public getDuplicateTexts() {\n    const mapOfTexts = this.mapShortTexts();\n    mapOfTexts.forEach((idsOfTexts, text) => {\n      if (idsOfTexts.length < 2) {\n        mapOfTexts.delete(text);\n      }\n    });\n    return mapOfTexts;\n  }\n\n  public showDuplicateTexts() {\n    const mapOfCurrentTexts = this.mapShortTexts();\n    let hasDuplicate = false;\n    mapOfCurrentTexts.forEach((idsOfTexts, text) => {\n      if (idsOfTexts.length > 1) {\n        hasDuplicate = true;\n        console.log(`Duplicate text: '${text}' - ids: ${idsOfTexts.join(',')}`);\n      }\n    });\n    if (!hasDuplicate) {\n      console.log(`There was no duplicate texts amongst the ${mapOfCurrentTexts.size} texts.`)\n    }\n  }\n\n  public getAllTags(): string[] {\n    return this.tags;\n  }\n\n  public getAllUsedTags(): string[] {\n    const usedTagsSet = new Set<string>();\n    this.allShortTexts?.forEach((shortText) => {\n      shortText.tags.forEach(tag => usedTagsSet.add(tag));\n    });\n    return Array.from(usedTagsSet);\n  }\n\n  public getUnusedTags(): string[] {\n    const allUsedTags = this.getAllUsedTags();\n    return this.tags?.filter(tag => !allUsedTags.includes(tag));\n  }\n}\n\nexport default ShortWritingManager;\n","import React, { useState, useRef, useEffect } from 'react';\nimport Tags from './Tags/Tags';\nimport Accordion from './Accordion/Accordion';\nimport { ShortText } from './ShortWritingManager/interfaces';\n\nimport ShortWritingManager from './ShortWritingManager/ShortWritingManager';\n/**\n * hatszavasok.json is the file containing my own six-word-stories.\n * I do not want to publicly upload them to github, so that file is in gitignore.\n * I use that file regularly at home but I would not like to make error in the repo with this.\n * So I left this row in comment, this way I can switch easily.\n * TODO: do this with .env file(s)\n */\n// import testJson from './data/hatszavasok.json';\nimport testJson from './data/0003.json';\n\nfunction App() {\n  const [tags, setTags] = useState<string[]>([]);\n  const [usedTags, setUsedTags] = useState<string[]>([]);\n  const [unusedTags, setUnusedTags] = useState<string[]>([]);\n  const [showDulicateTexts, setShowDulicateTexts] = useState(false);\n  const swm = useRef(new ShortWritingManager())\n  const [lastChangeTime, setLastChangeTime] = useState(Date.now());\n\n  useEffect(() => {\n    swm.current.readDataFromJSON(testJson);\n    setLastChangeTime(Date.now());\n  }, []);\n\n  useEffect(() => {\n    setTags(swm.current.getAllTags());\n    setUsedTags(swm.current.getAllUsedTags());\n    setUnusedTags(swm.current.getUnusedTags());\n  }, [lastChangeTime]);\n\n  function copyJsonToClipboard() {\n    const shortTextJsonInput = document.getElementById('short-texts-json') as HTMLTextAreaElement;\n    shortTextJsonInput.disabled = false;\n    shortTextJsonInput.focus();\n    shortTextJsonInput.select();\n    document.execCommand('copy');\n    shortTextJsonInput.disabled = true;\n  }\n\n  function renderBoxToShowJsonExport() {\n    return (\n      <div>\n        <textarea\n          disabled\n          rows={8}\n          cols={50}\n          id='short-texts-json'\n          value={swm.current.getJsonFromCurrentData()}\n        ></textarea>\n        <br />\n        <button onClick={copyJsonToClipboard}>Select this JSON and copy it to clipboard</button>\n      </div>\n    )\n  }\n\n  function bumpVersion() {\n    swm.current.bumpVersion();\n    setLastChangeTime(Date.now());\n  }\n\n  function renderButtonToBumpVersion() {\n    return (\n      <button onClick={bumpVersion}>Bump version</button>\n    )\n  }\n\n  function addNewText() {\n    const newTextInput = document.getElementById('new-text') as HTMLInputElement;\n    const newText = newTextInput.value.trim();\n    if (newText) {\n      const newTextCategoryInput = document.getElementById('new-text--category') as HTMLInputElement;\n      const newTextTagsInput = document.getElementById('new-text--tags') as HTMLInputElement;\n      const newCategory = newTextCategoryInput.value.trim();\n      let newTextTags: string[] = [];\n      const newTextTagsTrimmedValue = newTextTagsInput.value.trim();\n      if (newTextTagsTrimmedValue) {\n        newTextTags = newTextTagsTrimmedValue.split(',').map(value => value.trim());\n      }\n      const newShortText: ShortText = {\n        text: newText,\n        tags: newTextTags,\n        category: newCategory,\n      };\n      swm.current.addText(newShortText);\n      newTextInput.value = '';\n      newTextCategoryInput.value = '';\n      newTextTagsInput.value = '';\n      setLastChangeTime(Date.now());\n    }\n  }\n\n  function renderBoxToAddText() {\n    return (\n      <div id='add-text'>\n        <input type='text' id='new-text' placeholder='Short text'></input>\n        <input type='text' id='new-text--category' placeholder='Category'></input>\n        <input type='text' id='new-text--tags' placeholder='Tags (comma separated)'></input>\n        <button onClick={addNewText}>Add text</button>\n      </div>\n    )\n  }\n\n  function addMultipleNewTexts() {\n    const multipleNewTextsInput = document.getElementById('multiple-new-texts') as HTMLTextAreaElement;\n    const allNewTexts = multipleNewTextsInput.value.split('\\n');\n    allNewTexts.forEach(newTextString => {\n      newTextString = newTextString.trim();\n      if (newTextString) {\n        const newShortText: ShortText = {\n          text: newTextString,\n          tags: [],\n          category: '',\n        }\n        swm.current.addText(newShortText);\n        setLastChangeTime(Date.now());\n      }\n    });\n  }\n\n  function renderBoxToAddMultipleTexts() {\n    return (\n      <div>\n        <textarea rows={8} cols={50} id='multiple-new-texts' placeholder='Each row will be a new short text'></textarea>\n        <br />\n        <button onClick={addMultipleNewTexts}>Add all texts</button>\n      </div>\n    );\n  }\n\n  function importDataFromTextarea() {\n    const textareaInput = document.getElementById('import-from-string') as HTMLTextAreaElement;\n    const textareaInputTrimmedValue = textareaInput.value.trim();\n    if (textareaInputTrimmedValue) {\n      try {\n        const newJson = JSON.parse(textareaInput.value);\n        swm.current.readDataFromJSON(newJson);\n      } catch (error) {\n        console.error(error);\n      }\n      setLastChangeTime(Date.now());\n    }\n  }\n\n  function renderBoxToImportFromTextarea() {\n    return (\n      <div>\n        <textarea rows={8} cols={50} id='import-from-string'></textarea>\n        <br />\n        <button onClick={importDataFromTextarea}>Import JSON from textarea</button>\n      </div>\n    );\n  }\n\n  function renderDuplicateTexts() {\n    let textToShow = '';\n    const duplicateTextsMap = swm.current.getDuplicateTexts();\n    duplicateTextsMap.forEach((idsOfTexts, text) => {\n      textToShow += `'${text}' is the same at these IDs: ${idsOfTexts.join(',')}\\n`;\n    });\n\n    if (!textToShow) {\n      textToShow = 'There is not any duplicate short text among the current ones.';\n    }\n\n    return(\n      <pre>\n        {textToShow}\n      </pre>\n    );\n  }\n\n  function toggleShowingDuplicateTexts() {\n    setShowDulicateTexts(!showDulicateTexts);\n  }\n\n  function renderButtonToShowDuplicateTexts() {\n    return (\n      <div>\n        <button onClick={toggleShowingDuplicateTexts}>Toggle showing duplicate texts</button>\n        {showDulicateTexts && renderDuplicateTexts()}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h1>Short Writing Manager</h1>\n\n      <Accordion title='Add short text'>\n        {renderBoxToAddText()}\n      </Accordion>\n\n      <Accordion title='Add multiple short texts'>\n        {renderBoxToAddMultipleTexts()}\n      </Accordion>\n\n      <Accordion title='Tags'>\n        <Tags\n          allTags={tags}\n          usedTags={usedTags}\n          unusedTags={unusedTags}\n        ></Tags>\n      </Accordion>\n\n      <Accordion title='Random things'>\n        {renderButtonToBumpVersion()}\n        {renderButtonToShowDuplicateTexts()}\n      </Accordion>\n\n      <Accordion title='Import / Export'>\n        {renderBoxToImportFromTextarea()}\n        <hr />\n        {renderBoxToShowJsonExport()}\n      </Accordion>\n\n      <Accordion title='Show all current texts'>\n        <pre>\n          {swm.current && swm.current.getShortTextListAsPlainText()}\n        </pre>\n      </Accordion>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}